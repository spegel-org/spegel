image:
  # -- Image repository.
  repository: ghcr.io/spegel-org/spegel
  # -- Image Pull Policy.
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""
  # -- Image digest.
  digest: ""

# -- Image Pull Secrets
imagePullSecrets: []
# -- Overrides the name of the chart.
nameOverride: ""
# -- Overrides the full name of the chart.
fullnameOverride: ""
# -- Overrides the namespace where spegel resources are installed.
namespaceOverride: ""

serviceAccount:
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- Annotations to add to the pod.
podAnnotations: {}

# -- Security context for the pod.
podSecurityContext: {}
  # fsGroup: 2000

# -- The number of old history to retain to allow rollback.
revisionHistoryLimit: 10

# -- Security context for the Spegel container.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  registry:
    # -- Override the NODE_ID environment variable. It defaults to the field status.hostIP
    nodeIp: ""
    # -- Port to expose the registry via the service.
    port: 5000
    # -- Node port to expose the registry via the service.
    nodePort: 30021
    # -- Local host port to expose the registry.
    hostPort: 30020
    # -- If true adds topology aware hints annotation to node port service.
    topologyAwareHintsEnabled: true
  router:
    # -- Port to expose the router via the service.
    port: 5001
  metrics:
    # -- Port to expose the metrics via the service.
    port: 9090

# -- Resource requests and limits for the Spegel container.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Node selector for pod assignment.
nodeSelector:
  kubernetes.io/os: linux

# -- An update strategy to replace existing pods with new pods.
updateStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

# -- Tolerations for pod assignment.
tolerations:
  - key: CriticalAddonsOnly
    operator: Exists
  - effect: NoExecute
    operator: Exists
  - effect: NoSchedule
    operator: Exists

# -- Affinity settings for pod assignment.
affinity: {}

# -- Common labels to apply to all rendered resources.
commonLabels: {}

# -- Domain configured for service domain names.
clusterDomain: cluster.local.

serviceMonitor:
  # -- If true creates a Prometheus Service Monitor.
  enabled: false
  # -- Prometheus scrape interval.
  interval: 60s
  # -- Prometheus scrape interval timeout.
  scrapeTimeout: 30s
  # -- Service monitor specific labels for prometheus to discover servicemonitor.
  labels: {}
  # -- List of relabeling rules to apply the targetâ€™s metadata labels.
  relabelings: []
  # -- List of relabeling rules to apply to the samples before ingestion.
  metricRelabelings: []

grafanaDashboard:
  # -- If true creates a Grafana dashboard.
  enabled: false
  # -- Label that ConfigMaps should have to be loaded as dashboards.
  sidecarLabel: "grafana_dashboard"
  # -- Label value that ConfigMaps should have to be loaded as dashboards.
  sidecarLabelValue: "1"
  # -- Annotations that ConfigMaps can have to get configured in Grafana,
  # See: sidecar.dashboards.folderAnnotation for specifying the dashboard folder.
  # https://github.com/grafana/helm-charts/tree/main/charts/grafana
  annotations: {}

# -- Priority class name to use for the pod.
priorityClassName: system-node-critical

spegel:
  # -- Minimum log level to output. Value should be DEBUG, INFO, WARN, or ERROR.
  logLevel: "INFO"
  # -- Registries for which mirror configuration will be created.
  registries:
    - https://cgr.dev
    - https://docker.io
    - https://ghcr.io
    - https://quay.io
    - https://mcr.microsoft.com
    - https://public.ecr.aws
    - https://gcr.io
    - https://registry.k8s.io
    - https://k8s.gcr.io
    - https://lscr.io
  # -- Additional target mirror registries other than Spegel.
  additionalMirrorRegistries: []
  # -- Max ammount of mirrors to attempt.
  mirrorResolveRetries: 3
  # -- Max duration spent finding a mirror.
  mirrorResolveTimeout: "20ms"
  # -- Path to Containerd socket.
  containerdSock: "/run/containerd/containerd.sock"
  # -- Containerd namespace where images are stored.
  containerdNamespace: "k8s.io"
  # -- Path to Containerd mirror configuration.
  containerdRegistryConfigPath: "/etc/containerd/certs.d"
  # -- Path to Containerd content store..
  containerdContentPath: "/var/lib/containerd/io.containerd.content.v1.content"
  # -- If true Spegel will add mirror configuration to the node.
  containerdMirrorAdd: true
  # -- When true Spegel will resolve tags to digests.
  resolveTags: true
  # -- When true latest tags will be resolved to digests.
  resolveLatestTag: true
  # -- When true existing mirror configuration will be appended to instead of replaced.
  appendMirrors: false

  notReadyTaint:
    # -- If true remove the taint of the node when the registry is ready.
    removeWhenReady: false
    # -- Key of the taint to remove when spegel is ready.
    key: spegel/not-ready

verticalPodAutoscaler:
  # -- If true creates a Vertical Pod Autoscaler.
  enabled: false

  # -- Recommender responsible for generating recommendation for the object.
  # List should be empty (then the default recommender will generate the recommendation)
  # or contain exactly one recommender.
  recommenders: []
  # - name: custom-recommender-performance

  # -- List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
  controlledResources: []
  # -- Specifies which resource values should be controlled: RequestsOnly or RequestsAndLimits.
  controlledValues: RequestsAndLimits

  # -- Define the max allowed resources for the pod
  maxAllowed: {}
  # cpu: 100m
  # memory: 128Mi
  # -- Define the min allowed resources for the pod
  minAllowed: {}
  # cpu: 100m
  # memory: 128Mi

  updatePolicy:
    # -- Specifies minimal number of replicas which need to be alive for VPA Updater to attempt pod eviction
    minReplicas: 2

    # -- Specifies whether recommended updates are applied when a Pod is started and whether recommended updates
    # are applied during the life of a Pod. Possible values are "Off", "Initial", "Recreate", and "Auto".
    updateMode: Auto
